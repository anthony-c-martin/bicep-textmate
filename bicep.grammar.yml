---
$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Bicep
version: '...'
name: '...'
scopeName: source.bicep
patterns:
- include: "#statements"

variables:
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'

# Useful pages:
#   https://www.apeth.com/nonblog/stories/textmatebundle.html
#   https://rubular.com/
#   https://github.com/microsoft/TypeScript-TmLanguage/blob/master/TypeScript.YAML-tmLanguage
#   https://github.com/Benvie/JavaScriptNext.tmLanguage/blob/master/JSON%20(JavaScriptNext).YAML-tmLanguage

repository:
  statements:
    patterns:
    - include: '#declaration'
    - include: '#comments'
  
  declaration:
    patterns:
    - include: '#targetscope-declaration'
    # - include: '#param-declaration'
    # - include: '#var-declaration'
    - include: '#resource-declaration'
    # - include: '#module-declaration'
    # - include: '#output-declaration'

  comments:
    patterns:
    - name: comment.block.bicep
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.bicep}
    - name: comment.line.double-slash.bicep
      match: (//).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.bicep}

  targetscope-declaration:
    begin: ^\s*(targetScope)\s+=\s+
    beginCaptures:
      '1': { name: keyword.control.declaration.bicep }
    end: \s*$
    patterns:
    - include: '#expression'

  resource-declaration:
    begin: ^\s*(resource)\s+({{identifier}})(\s+existing|)\s+=\s+(?=\{)
    beginCaptures:
      '1': { name: keyword.control.declaration.bicep }
      '2': { name: variable.language.bicep }
      '3': { name: keyword.control.declaration.bicep }
    end: (?<=^\s*\})\s*$
    patterns:
    - include: '#object'

  expression:
    patterns:
    - include: '#string'
    - include: '#number'
    - include: '#constant'
    - include: '#array'
    - include: '#object'

  identifier:
    name: meta.definition.property.ts
    match: '[_$[:alpha:]][_$[:alnum:]]*'

  string:
    name: string.quoted.single.bicep
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.bicep }
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.string.end.bicep }
      '2': { name: invalid.illegal.newline.bicep }
    patterns:
    - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.bicep
    match: \\(u[0-9A-Fa-f]{6}|n|r|t|\\|\')

  number:
    patterns:
    - name: constant.numeric.decimal.bicep
      match: '[0-9]+'
      captures:
        '0': { name: storage.type.numeric.decimal.bicep }

  array:
    name: meta.array.literal.bicep
    begin: \s*(\[)\s*$
    beginCaptures:
      '1': { name: meta.brace.square.bicep }
    end: ^\s*(\])
    endCaptures:
      '1': { name: meta.brace.square.bicep }
    patterns:
    - include: '#expression'

  object:
    name: meta.object.literal.bicep
    begin: \s*(\{)\s*$
    beginCaptures:
      '1': { name: punctuation.definition.block.bicep }
    end: ^\s*(\})
    endCaptures:
      '1': { name: punctuation.definition.block.bicep }
    patterns:
    - include: '#object-property'

  object-property:
    patterns:
    - include: '#string'
    - match: '[_$[:alpha:]][_$[:alnum:]]*'
      captures:
        '0': { name: meta.definition.property.bicep }
    - name: meta.structure.dictionary.value.bicep
      begin: ':'
      beginCaptures:
        '0': { name: punctuation.separator.dictionary.key-value.bicep }
      end: \s*$
      patterns:
      - include: '#expression'

  constant:
    name: constant.language.bicep
    match: \b(?:true|false|null)\b